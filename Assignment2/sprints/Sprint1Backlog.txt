// Sprint 1 Backlog
June 13 to June 19

User Stories from Product Backlog that we will address in this sprint:
a) As a user, I can input characters into the shell so that I can interact with the shell.
b) As a user, I can exit the shell by calling exit command so that exiting the shell is simple.
c) As a user, I can print out the history of all my inputs regardless if it's invalid or not, so that I can recall what I have done.
d) As a user, I can print any string onto the shell so that I can output whatever I type.  	
e) As a user, I can save the current working directory so that I can have easy access to the directory.
f) As a user, I can change my current working directory by writing a relative path, so that I can move to other directories.	
g) As a user, I can be notified that i've enteried a invalid command so that i can fix my mistake.
h) As a user, I want to make sure that all my commands do the things that I want them to do,this is the parent class for other child classes.
i) As a user, I can create a new directory by calling mkdir command with a full path specified, so that I can create directory in any existing location.	
j) As a user, I can print out the complete path of my current working directory so that I know where my current working directory is in the directory tree. 

Specific tasks to be accomplished:
a-1. (Shell) Create class Shell
a-2. (Shell) In main method, create an algorithm that continuously asks for and interprets user inputs by converting input to string
b-1. (Exit) Create class Exit 
b-2. (Exit) Create a method that breaks out of the loop in Shell main method once it is called by user
c-1. (History) Create class History
c-2. (InputHistory) Create class InputHistory
c-3. (InputHistory) Create an ordered list that stores all user inputs regardless of validity
c-4. (History) Create a method that accesses InputHistory's user input list and prints the whole history
c-5. (History) Create a method that can print a specific number of most recent user inputs
d-1. (Echo) Create class Echo
d-2. (Echo) Write base code for the Echo class to print input to shell
e-1. Create classes FileSystem, File, Directory, DirectoryStack, and Pushd
e-2. (FileSystem) Write code for the FileSystem class so that it can organize directories and files into a hierarchy
e-3. (File) Write base code for the File class so that it can store information about a file's contents
e-4. (Directory) Write base code for the Directory class so that it can store information about a directory and its contents
e-5. (DirectoryStack) Write base code for the DirectoryStack Class so that it can store a directory stack
e-6. (Pushd) Write code for the Pushd class so that it can add a directory to the DirectoryStack
f-1. (Cd) Create class Cd
f-2. (Cd) Write code for Cd class so that the user can change their working directory
g-1. (verifer) create parent class called verifer
g-2. (input verifer) create child class called input verifer, that verifes the command is exists.
g-3. (command verifer) create child class called command verifer, that verifes the command is executable.
h-1. (commands) create a parent class called command that will excute all the commands that youse types.
h-2. (print commands) create a child class called print commands that has other child class that only prints.
h-3. (manipulate commands) create a child class called manipulate commands that has other child class that will manipulate folders and files.
h-4. (documentation) create documentations and store them in command class
i-1. (mkdir) create class mkdir
i-2. (mkdir) write code for mkdir class so user can create a new directory at a specified location
i-3. (mkdir) write code for mkdir so user can create a new directory without specifying a location
j-1. (pwd) create class pwd
j-2. (pwd) write code to print the path of the working directory
j-3. (WorkingDirectory) create class WorkingDirectory
j-4. (WorkingDirectory) write code so user can store information about the current working directory

These tasks are assignment as follows:

User: Gary Xie
Tasks: d-1, d-2, e-1, e-2, e-3, e-4, e-5, e-6, f-1, f-2

User: Tom Daudelin
Tasks: a-1, a-2, b-1, b-2, c-1, c-2, c-3, c-4, c-5

User: Chongmin Bai
Tasks: g-1, g-2, g-3, h-1, h-2, h-3, h-4

User: Adil Shah
Tasks: i-1, i-2, i-3, j-1, j-2, j-3, j-4
